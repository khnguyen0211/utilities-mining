a = Item('A', 3)
b = Item('B', 6)
c = Item('C', -3)
d = Item('D', 12)
e = Item('E', -5)
f = Item('F', -2)
g = Item('G', -1)

trans1 = Transaction(1, dict(zip([a, b, c, d], [5, 2, 1, 2])))
trans2 = Transaction(2, dict(zip([a, c, d, g], [1, 1, 1, 3])))
trans3 = Transaction(3, dict(zip([a, c, f], [1, 1, 1])))
trans4 = Transaction(4, dict(zip([a, f, g], [1, 4, 2])))
trans5 = Transaction(5, dict(zip([a, g], [1, 2])))
trans6 = Transaction(6, dict(zip([b, c, d, e], [3, 2, 3, 1])))
trans7 = Transaction(7, dict(zip([c, e], [6, 4])))
trans8 = Transaction(8, dict(zip([e, f], [1, 3])))

items = [a, b, c, d, e, f, g]
database = [trans1, trans2, trans3, trans4, trans5, trans6, trans7, trans8]

database








a = Item('A', 1)
b = Item('B', 2)
c = Item('C', 5)
d = Item('D', 2)
e = Item('E', 3)

items = [a, b, c, d, e]

trans1 = Transaction(1, dict(zip([a, b, c, d, e], [5, 3, 2, 4, 3])))
trans2 = Transaction(2, dict(zip([a, b, c, d], [6, 4, 3, 5])))
trans3 = Transaction(3, dict(zip([a, d, e], [4, 2, 1])))
trans4 = Transaction(4, dict(zip([a, e], [7, 6])))
trans5 = Transaction(5, dict(zip([a, b, d, e], [5, 4, 4, 3])))
trans6 = Transaction(6, dict(zip([b, e], [8, 7])))

database = [trans1, trans2, trans3, trans4, trans5, trans6]

database





PHM: Mining Periodic High-Utility Item sets

a = Item("A", 5)
b = Item("B", 2)
c = Item("C", 1)
d = Item("D", 2)
e = Item("E", 3)


trans1 = Transaction(1, dict(zip([a, c], [1, 1])))
trans2 = Transaction(2, dict(zip([e], [1])))
trans3 = Transaction(3, dict(zip([a, b, c, d, e], [1, 5, 1, 3, 1])))
trans4 = Transaction(4, dict(zip([b, c, d, e], [4, 3, 3, 1])))
trans5 = Transaction(5, dict(zip([a, c, d], [1, 1, 1])))
trans6 = Transaction(6, dict(zip([a, c, e], [2, 6, 2])))
trans7 = Transaction(7, dict(zip([b, c, e], [2, 2, 1])))

items = [a, b, c, d, e]
database = [trans1, trans2, trans3, trans4, trans5, trans6, trans7]









a = Item("A", -5)
b = Item("B", 2)
c = Item("C", 1)
d = Item("D", 2)
e = Item("E", 3)
f = Item("F", 1)
g = Item("G", 1)

trans1 = Transaction(1, dict(zip([a, c, d], [1, 1, 1])))
trans2 = Transaction(2, dict(zip([a, c, e, g], [2, 6, 2, 5])))
trans3 = Transaction(3, dict(zip([a, b, c, d, e, f], [1, 2, 1, 6, 1, 5])))
trans4 = Transaction(4, dict(zip([b, c, d, e], [4, 3, 3, 1])))
trans5 = Transaction(5, dict(zip([b, c, e, g], [2, 2, 1, 2])))
items = [a, b, c, d, e, f, g]
database = [trans1, trans2, trans3, trans4, trans5]



class Item:
    def __init__(self, item: str, utility: int):
        self.item = item
        self.utility = utility
        self._twu = 0

    @property
    def twu(self) -> int:
        return self._twu

    @twu.setter
    def twu(self, value: int) -> None:
        self._twu = value

    def __repr__(self):
        # return f"({self.item},{self.twu})"
        return f"{self.item}"

    def __eq__(self, other):
        if isinstance(other, Item):
            return self.item == other.item and self.utility == other.utility
        return False

    def __hash__(self):
        return hash((self.item, self.utility))


class TransItem:
    def __init__(self, item: Item, quantity: int, probability: float):
        self.item = item
        self.quantity = quantity
        self.probability = probability

    def __repr__(self):
        return f"{self.item},{self.quantity},{self.probability})"

    def get_total_probability(self):
        return self.quantity * self.probability


class Transaction:
    def __init__(self, id: int, trans_items: set[TransItem]):
        self.id = id
        self.trans_items = trans_items

    def __repr__(self):
        return f"t{self.id}, {self.trans_items}"


from collections import namedtuple

Utilities = namedtuple("Utilities", ["tid", "pro" "pu", "nu", "ru"])

class AbstractList:
    def __init__(self, items: set[Item], utility_values: list[Utilities]):
        self.items = items
        self.utility_values = utility_values

    def get_ru(self):
        ru = 0
        for i in self.utility_values:
            ru += i.ru
        return ru

    def get_pu(self):
        pu = 0
        for i in self.utility_values:
            pu += i.pu
        return pu


a = Item("a", 6)
b = Item("b", 7)
c = Item("c", 1)
d = Item("d", -5)
e = Item("e", 3)

t1_trans_items = {TransItem(b, 3, 0.85), TransItem(c, 1, 1.0), TransItem(d, 2, 0.70)}

t2_trans_items = {
    TransItem(a, 1, 1.0),
    TransItem(b, 1, 0.60),
    TransItem(c, 3, 0.75),
    TransItem(e, 1, 0.40),
}

t3_trans_items = {
    TransItem(a, 1, 0.55),
    TransItem(b, 2, 0.60),
    TransItem(c, 4, 1.0),
    TransItem(d, 1, 0.90),
    TransItem(e, 5, 0.40),
}

t4_trans_items = {TransItem(b, 3, 0.90), TransItem(d, 1, 0.45)}

t5_trans_items = {
    TransItem(a, 4, 1.0),
    TransItem(c, 3, 0.85),
    TransItem(d, 2, 0.70),
    TransItem(e, 2, 0.45),
}

t1 = Transaction(1, t1_trans_items)
t2 = Transaction(2, t2_trans_items)
t3 = Transaction(3, t3_trans_items)
t4 = Transaction(4, t4_trans_items)
t5 = Transaction(5, t5_trans_items)

database = [t1, t2, t3, t4, t5]

for trans in database:
    print(trans)
